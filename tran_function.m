function n_state = tran_function(prev_state, controller_out, robot_params, time)
    % Input state has [pos_x, pos_y, theta, ...
    %                  controller_linear, controller_angular, ...
    %                  wheel_radius, wheel_separation, ...
    %                  start_time, end_time]
    % Input state size is [1, 10]

%     new_theta = prev_state(8)*prev_state(end) + ... 
%                 0.5*(prev_state(9) - prev_state(8))*(prev_state(end)^2) +...
%                 + prev_state(7);
    
%     state_x = [prev_state(1), prev_state(2), prev_state(3), new_theta, prev_state(end)];
%     state_y = [prev_state(4), prev_state(5), prev_state(6), new_theta, prev_state(end)];
% 
%     n_state = [dynamics_const_acc(state_x, "x"); prev_state(2); prev_state(3); ...
%                dynamics_const_acc(state_y, "y"); prev_state(5); prev_state(6); ...
%                new_theta; prev_state(8); prev_state(9); prev_state(end)];
    
    wheel_r = robot_params(1);
    wheel_sep = robot_params(2);
    kinematicModel = differentialDriveKinematics("WheelRadius", wheel_r, ...
                                                 "TrackWidth", wheel_sep, ...
                                                 "VehicleInputs", ...
                                                 "VehicleSpeedHeadingRate");
    % time_res = time(2)-time(1);
    % tspan = time(1):time_res/3:time(2);
%     res_time = seconds(time(2)-time(1));
    tspan = 0:time(2):time(2);

    [t,y] = ode45(@(t,y)derivative(kinematicModel, y, controller_out), tspan, prev_state);
    n_state = [y(end, 1); y(end, 2); y(end, 3)];
end